<?xml version='1.0' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.12.2">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <jenkins.branch.BranchIndexingCause plugin="branch-api@2.0.11"/>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.2.0">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/shreys-s%2Feasyleave/detail/master/1</mappedUrl>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@3.1.2.10">
      <queuingDurationMillis>17</queuingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <jenkins.scm.api.SCMRevisionAction plugin="scm-api@2.2.1">
      <revision class="jenkins.plugins.git.AbstractGitSCMSource$SCMRevisionImpl" plugin="git@3.5.1">
        <head class="org.jenkinsci.plugins.github_branch_source.BranchSCMHead" plugin="github-branch-source@2.2.3">
          <name>master</name>
        </head>
        <hash>d0fff559871b7bfbedb8f8684c6d9a264bc657d1</hash>
      </revision>
    </jenkins.scm.api.SCMRevisionAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.8">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <hudson.plugins.git.util.BuildData plugin="git@3.5.1">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/master</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@2.5.0">
              <sha1>d0fff559871b7bfbedb8f8684c6d9a264bc657d1</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/master</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/sumitsaiwal/easyleave.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <hudson.plugins.git.GitTagAction plugin="git@3.5.1">
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <entry>
          <string>refs/remotes/origin/master</string>
          <list/>
        </entry>
      </tags>
      <ws>/var/lib/jenkins/workspace/shreys-s_easyleave_master-YFO3DTUAVRFVGJNX325XRALVL6WDT74FV6RB5W6BMLFM6GMVHORQ</ws>
    </hudson.plugins.git.GitTagAction>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.6">
      <revisionStates>
        <entry>
          <string>git https://github.com/sumitsaiwal/easyleave.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.39">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <com.sonyericsson.jenkins.plugins.bfa.model.FailureCauseBuildAction plugin="build-failure-analyzer@1.19.0">
      <foundFailureCauses class="java.util.Collections$SynchronizedList" serialization="custom">
        <java.util.Collections_-SynchronizedCollection>
          <default>
            <c class="linked-list"/>
            <mutex class="java.util.Collections$SynchronizedList" reference="../../.."/>
          </default>
        </java.util.Collections_-SynchronizedCollection>
        <java.util.Collections_-SynchronizedList>
          <default>
            <list class="linked-list" reference="../../../java.util.Collections_-SynchronizedCollection/default/c"/>
          </default>
        </java.util.Collections_-SynchronizedList>
      </foundFailureCauses>
      <build class="flow-build" reference="../../.."/>
    </com.sonyericsson.jenkins.plugins.bfa.model.FailureCauseBuildAction>
    <com.sonyericsson.rebuild.RebuildAction plugin="rebuild@1.25"/>
  </actions>
  <queueId>780</queueId>
  <timestamp>1504858538150</timestamp>
  <startTime>1504858538155</startTime>
  <result>FAILURE</result>
  <duration>40498</duration>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>//Picking a build agent labeled &quot;ec2&quot; to run pipeline on&#xd;
node {&#xd;
  stage &apos;Pull from SCM&apos;&#xd;
  //Passing the pipeline the ID of my GitHub credentials and specifying the repo for my app&#xd;
  git credentialsId: &apos;8792d64b-67c1-450e-a23f-08e8c1eb7b38&apos;, url: &apos;https://github.com/sumitsaiwal/easyleave.git&apos;&#xd;
  //stage &apos;Test Code&apos;&#xd;
  //sh &apos;mvn install&apos;&#xd;
&#xd;
  stage &apos;Test and Build app&apos;&#xd;
  //Running the maven build and archiving the war&#xd;
  sh &apos;mvn clean package&apos;&#xd;
  archive &apos;target/*.war&apos;&#xd;
&#xd;
  stage &apos;Package Image&apos;&#xd;
  //Packaging the image into a Docker image //CloudBees Docker Custom Build Environment Plugin&#xd;
  def pkg = docker.build (&apos;sumitsaiwal/easyleave&apos;, &apos;.&apos;)&#xd;
&#xd;
&#xd;
  stage &apos;Push Image to DockerHub&apos;&#xd;
  //Pushing the packaged app in image into DockerHub //CloudBees Docker Custom Build Environment Plugin //Docker Plugin&#xd;
  docker.withRegistry (&apos;https://index.docker.io/v1/&apos;, &apos;8792d64b-67c1-450e-a23f-08e8c1eb7b38&apos;) {&#xd;
      sh &apos;ls -lart&apos;&#xd;
      pkg.push &apos;docker-demo&apos;&#xd;
  }&#xd;
&#xd;
  stage &apos;Stage image&apos;&#xd;
  //Deploy image to staging in ECS&#xd;
&#xd;
        sh &quot;aws ecs update-service --service staging-game  --cluster staging --desired-count 0&quot;&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                sh &quot;aws ecs describe-services --services staging-game  --cluster staging  &gt; .amazon-ecs-service-status.json&quot;&#xd;
&#xd;
                // parse `describe-services` output&#xd;
                def ecsServicesStatusAsJson = readFile(&quot;.amazon-ecs-service-status.json&quot;)&#xd;
                def ecsServicesStatus = new groovy.json.JsonSlurper().parseText(ecsServicesStatusAsJson)&#xd;
                println &quot;$ecsServicesStatus&quot;&#xd;
                def ecsServiceStatus = ecsServicesStatus.services[0]&#xd;
                return ecsServiceStatus.get(&apos;runningCount&apos;) == 0 &amp;&amp; ecsServiceStatus.get(&apos;status&apos;) == &quot;ACTIVE&quot;&#xd;
            }&#xd;
        }&#xd;
        sh &quot;aws ecs update-service --service staging-game  --cluster staging --desired-count 1&quot;&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                sh &quot;aws ecs describe-services --services staging-game --cluster staging &gt; .amazon-ecs-service-status.json&quot;&#xd;
&#xd;
                // parse `describe-services` output&#xd;
                def ecsServicesStatusAsJson = readFile(&quot;.amazon-ecs-service-status.json&quot;)&#xd;
                def ecsServicesStatus = new groovy.json.JsonSlurper().parseText(ecsServicesStatusAsJson)&#xd;
                println &quot;$ecsServicesStatus&quot;&#xd;
                def ecsServiceStatus = ecsServicesStatus.services[0]&#xd;
                return ecsServiceStatus.get(&apos;runningCount&apos;) == 1 &amp;&amp; ecsServiceStatus.get(&apos;status&apos;) == &quot;ACTIVE&quot;&#xd;
            }&#xd;
        }&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                try {&#xd;
                    sh &quot;curl http://52.37.74.74:8080/easyleave&quot;&#xd;
                    return true&#xd;
                } catch (Exception e) {&#xd;
                    return false&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
        echo &quot;easyleave#${env.BUILD_NUMBER} SUCCESSFULLY deployed to http://52.37.74.74:8080/easyleave&quot;&#xd;
        input &apos;Does staging http://52.37.74.74:8080/easyleave look okay?&apos;&#xd;
&#xd;
  stage &apos;Deploy to ECS&apos;&#xd;
  //Deploy image to production in ECS&#xd;
        sh &quot;aws ecs update-service --service production-deploy-game  --cluster production --desired-count 0&quot;&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                sh &quot;aws ecs describe-services --service production-deploy-game  --cluster production   &gt; .amazon-ecs-service-status.json&quot;&#xd;
&#xd;
                // parse `describe-services` output&#xd;
                def ecsServicesStatusAsJson = readFile(&quot;.amazon-ecs-service-status.json&quot;)&#xd;
                def ecsServicesStatus = new groovy.json.JsonSlurper().parseText(ecsServicesStatusAsJson)&#xd;
                println &quot;$ecsServicesStatus&quot;&#xd;
                def ecsServiceStatus = ecsServicesStatus.services[0]&#xd;
                return ecsServiceStatus.get(&apos;runningCount&apos;) == 0 &amp;&amp; ecsServiceStatus.get(&apos;status&apos;) == &quot;ACTIVE&quot;&#xd;
            }&#xd;
        }&#xd;
        sh &quot;aws ecs update-service --service production-deploy-game  --cluster production  --desired-count 1&quot;&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                sh &quot;aws ecs describe-services --service production-deploy-game  --cluster production  &gt; .amazon-ecs-service-status.json&quot;&#xd;
&#xd;
                // parse `describe-services` output&#xd;
                def ecsServicesStatusAsJson = readFile(&quot;.amazon-ecs-service-status.json&quot;)&#xd;
                def ecsServicesStatus = new groovy.json.JsonSlurper().parseText(ecsServicesStatusAsJson)&#xd;
                println &quot;$ecsServicesStatus&quot;&#xd;
                def ecsServiceStatus = ecsServicesStatus.services[0]&#xd;
                return ecsServiceStatus.get(&apos;runningCount&apos;) == 1 &amp;&amp; ecsServiceStatus.get(&apos;status&apos;) == &quot;ACTIVE&quot;&#xd;
            }&#xd;
        }&#xd;
        timeout(time: 5, unit: &apos;MINUTES&apos;) {&#xd;
            waitUntil {&#xd;
                try {&#xd;
                    sh &quot;curl http://52.202.249.4:80&quot;&#xd;
                    return true&#xd;
                } catch (Exception e) {&#xd;
                    return false&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
        echo &quot;easyleave#${env.BUILD_NUMBER} SUCCESSFULLY deployed to http://52.202.249.4:80&quot;&#xd;
    }&#xd;
</script>
    <loadedScripts class="map"/>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>83953971</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>9490605582</long>
      </entry>
      <entry>
        <string>run</string>
        <long>1412761352</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>4278167040</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>305980175</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>14</iota>
    <head>1:14</head>
  </execution>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/sumitsaiwal/easyleave.git</url>
            <credentialsId>8792d64b-67c1-450e-a23f-08e8c1eb7b38</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches class="singleton-list">
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.LocalBranch>
            <localBranch>master</localBranch>
          </hudson.plugins.git.extensions.impl.LocalBranch>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/shreys-s_easyleave_master-YFO3DTUAVRFVGJNX325XRALVL6WDT74FV6RB5W6BMLFM6GMVHORQ</workspace>
      <changelogFile>/var/lib/jenkins/jobs/shreys-s/jobs/easyleave/branches/master/builds/1/changelog0.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>